// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
	Mux16(a=x, sel=zx, out=xZeroedMux);
	Mux16(a=y, sel=zy, out=yZeroedMux);

	Not16(in=xZeroedMux, out=xZeroedMuxNot);
	Not16(in=yZeroedMux, out=yZeroedMuxNot);

	Mux16(a=xZeroedMux, b=xZeroedMuxNot, sel=nx, out=xPreset);
	Mux16(a=yZeroedMux, b=yZeroedMuxNot, sel=ny, out=yPreset);

	Add16(a=xPreset, b=yPreset, out=xySum);
	And16(a=xPreset, b=yPreset, out=xyAnd);
	
	Mux16(a=xyAnd, b=xySum, sel=f, out=outMux);
	Not16(in=outMux, out=outMuxNot);

	Mux16(a=outMux, b=outMuxNot, sel=no, out=out, out[0..7]=out0to7, out[8..15]=out8to15, out[15]=ng);

	Or8Way(in=out0to7, out=or81);
	Or8Way(in=out8to15, out=or82);
	Or(a=or81, b=or82, out=notZero);
	Not(in=notZero, out=zr);
}
